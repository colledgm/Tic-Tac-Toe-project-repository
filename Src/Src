#include "LedControl.h"
#include "ButtonControl.h"

bool redTurn=false;
bool AI=false;

void clearField(){
	for(unsigned int x=0; x < WIDTH; x++){
		for(unsigned int y=0; y < HEIGHT; y++){
			state[x][y] = ALL_OFF;
		}
	}
}

void switchTurn(){
	if(redTurn){
		redTurn = false;
		showWhiteTurn();
	} else {
		redTurn = true;
		showRedTurn();
	}
}

bool hasWon(unsigned int desiredLedState){
	if((desiredLedState != RED_LED_ON) && (desiredLedState != WHITE_LED_ON)){
		return false;
	}
	
	for(unsigned int x=0; x < WIDTH; x++){
		bool allTaken = true;
		for(unsigned int y=0; y < HEIGHT; y++){
			if(state[x][y] != desiredLedState){
				allTaken = false;
				
				break;
			}
		}
		if(allTaken){
			return true;
		}
	}
	
	for(unsigned int y=0; y < HEIGHT; y++){
		bool allTaken = true;
		for(unsigned int x=0; x < WIDTH; x++){
			if(state[x][y] != desiredLedState){
				allTaken = false;
				
				break;
			}
		}
		if(allTaken){
			return true;
		}
	}

	bool allTaken1 = true;
	bool allTaken2 = true;
	for(unsigned int xy=0; (xy < HEIGHT) && (xy < WIDTH); xy++){
		if(state[xy][xy] != desiredLedState){
			allTaken1 = false;
		}
		if(state[xy][WIDTH-1-xy] != desiredLedState){
			allTaken2 = false;
		}
	}
	if(allTaken1 || allTaken2){
		return true;
	}

	return false;
}

bool draw(){
	for(unsigned int x=0; x < WIDTH; x++){
		for(unsigned int y=0; y < HEIGHT; y++){
			if(state[x][y] == ALL_OFF){
				return false;
			}
		}
	}
	return true;
}

void processButtonPress(unsigned int x, unsigned int y, unsigned int side){
	if(state[x][y] != ALL_OFF){
		return;
	} else {
		state[x][y] = side;

		if(hasWon(side)){
			switchTurn();
			delay(100);
			switchTurn();
			delay(100);
			switchTurn();
			delay(100);
			switchTurn();
			delay(100);
			switchTurn();
			delay(100);
			clearField();
		} else if(draw()){
			switchTurn();
			clearField();
		} else {
			switchTurn();
		}
	}
}

void checkButtons(){
	for(unsigned int y=0; y < HEIGHT; y++){
		turnOnButtonSet(y);
		for(unsigned int x=0; x < WIDTH; x++){
			if(redTurn){
				unsigned int rX = convert_button_red_x(x, y);
				unsigned int rY = convert_button_red_y(x, y);

				if(readRedSet(x)){
					processButtonPress(rX,rY, RED_LED_ON);
				}
			} else {
				unsigned int wX = convert_button_white_x(x, y);
				unsigned int wY = convert_button_white_y(x, y);

				if(readWhiteSet(x)){
					processButtonPress(wX,wY, WHITE_LED_ON);
				}
			}
		}
		turnOffButtonSet(y);
		delay(1);
	}
}

//new additional functions
void selectAI(){
   bool done=false;//to determine if a button was pushed, a loop withing the set-up is needed
   while(!done){//to me, go over this part to make sure it only reads a button input from either side.
      for(unsigned int y=0; y < HEIGHT; y++){
        turnOnButtonSet(y);
        for(unsigned int x=0; x < WIDTH; x++){
         if(readRedSet(x)){
              AI=false;//set the game to 2 player if a red-side button was pushed.
              done=true;
          }
          

          if(readWhiteSet(x)){
              AI=true;//set the game to AI if a white-side button was pushed.
              done=true;
          }
          
        }
        turnOffButtonSet(y);
        delay(1);
      }
   }
  }

void AIturn(){
     int ran = random(0,90);//random number generator
    if(ran <= 10){
      turnOnButtonSet(0);//select column
      unsigned int wX = convert_button_white_x(0, 0);
      unsigned int wY = convert_button_white_y(0, 0);//select row
       
      processButtonPress(wX,wY, WHITE_LED_ON);//the computer presses a button.  
      turnOffButtonSet(0);      
    }else if(ran <= 20){
      turnOnButtonSet(0);
      unsigned int wX = convert_button_white_x(1, 0);
      unsigned int wY = convert_button_white_y(1, 0);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(0);
    }else if(ran <= 30){
      turnOnButtonSet(0);
      unsigned int wX = convert_button_white_x(2, 0);
      unsigned int wY = convert_button_white_y(2, 0);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(0);
    }else if(ran <= 40){
      turnOnButtonSet(1);
      unsigned int wX = convert_button_white_x(0, 1);
      unsigned int wY = convert_button_white_y(0, 1);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(1);
    }else if(ran <= 50){
      turnOnButtonSet(1);
      unsigned int wX = convert_button_white_x(1, 1);
      unsigned int wY = convert_button_white_y(1, 1);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(1);
    }else if(ran <= 60){
      turnOnButtonSet(1);
      unsigned int wX = convert_button_white_x(2, 1);
      unsigned int wY = convert_button_white_y(2, 1);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(1);
    }else if(ran <= 70){
      turnOnButtonSet(2);
      unsigned int wX = convert_button_white_x(0, 2);
      unsigned int wY = convert_button_white_y(0, 2);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(2);
    }else if(ran <= 80){
      turnOnButtonSet(2);
      unsigned int wX = convert_button_white_x(1, 2);
      unsigned int wY = convert_button_white_y(1, 2);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(2);
    }else if(ran <= 90){
      turnOnButtonSet(2);
      unsigned int wX = convert_button_white_x(2, 2);
      unsigned int wY = convert_button_white_y(2, 2);
       
      processButtonPress(wX,wY, WHITE_LED_ON);  
      turnOffButtonSet(2);
    }
    
    redTurn = true;
    showRedTurn();
}
//additional functions end

void setup() {
	for(unsigned int x=0; x < WIDTH; x++){
		pinMode(x_r_pins[x], OUTPUT);
		pinMode(x_w_pins[x], OUTPUT);
	}
	for(unsigned int y=0; y < HEIGHT; y++){
		pinMode(y_pins[y], OUTPUT);
		pinMode(button_power_pins[y], OUTPUT);
	}
	
	for(unsigned int y=0; y < HEIGHT; y++){
		turnOffButtonSet(y);
	}

	pinMode(PIN_RED_TURN_INDICATOR, OUTPUT);
	pinMode(PIN_WHITE_TURN_INDICATOR, OUTPUT);

  randomSeed(analogRead(0));
  selectAI(); //user choses if AI is being used
  delay(500);//prevent's a button push from being registered again.

	if(redTurn){
		showRedTurn();
	} else {
		showWhiteTurn();
	}
}


void loop() {
  showLeds();
  if(AI)
  {
	  if(redTurn){//red turn is player controled.
      checkButtons();
	  }else{
      AIturn();
	  }
  }
  else
  {
    checkButtons();
  }
}
